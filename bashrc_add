#!/bin/bash

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

GIT_HTTP_PROTOCOL="http://"
GIT_SSH_PROTOCOL="git@"
GIT_SERVER="git.schuerz.at"
GIT_REPOPATH="/public/server-config.git"
GIT_SSH_PATH="/srv/repos"
SC=server-config
SCONF="${HOME}/${SC}"
LOGDIR="./logs"
LOGFILE="${LOGDIR}/git.log"
GITCHECKOUT_SCRIPT_OPTIONS="-h"
GIT_TIMEOUT=5s


#----------------------------------------
[ -d "${LOGDIR}" ] || mkdir -p "${LOGDIR}"
[ -f "${SCONF}/serverconfig.local.conf" ] && . "${SCONF}/serverconfig.local.conf"

sync_config () {
    cd  "${SCONF}"
    if which git >/dev/null; then
        echo -n "Sync config with ${GIT_SERVER}: " 1>&2
    	#git pull > /dev/null 2>&1
        # GITCHECKOUT_SCRIPT_OPTIONS are options for bin/git-checkout.sh
        # this are now:
        #   -h for headless repo
        ./bin/git-checkout.sh ${GITCHECKOUT_SCRIPT_OPTIONS} || nok="not " 2>>"${LOGFILE}" 1>&2 #|tee -a ./logs/git.log 1>&2   
        #echo -n synced 1>&2
        printf '%s\n' "${nok}synced" 1>&2

cat << EOF >&2

---------------------------------------------------
if you want to update submodules, change dir an run
cd ~/server-config
git submodule update --remote --merge
cd ~
---------------------------------------------------
EOF
#        # Sync submodules
#        #if [ $(curl -sLI --connect-timeout 1 -m 1 "${GIT_HTTP_PROTOCOL}${GIT_SERVER}"|grep "HTTP/"|tail -n1|cut -d$' ' -f2 ) -eq 200 ] ;then 
#        if $( git ls-remote >/dev/null 2>&1) ;then 
#        #if $( git ls-remote https://github.com/VundleVim/Vundle.vim HEAD >/dev/null 2>&1) ;then 
#
#            echo -n "Sync submodules: " 1>&2
#            git submodule update --remote --merge >/dev/null 2>&1 || nok="not " 2>>"${LOGFILE}" 1>&2
#            printf '%s\n' "${nok}synced" 1>&2
#        else
#            echo "Syncing of submodules not possible, github.com not reachable"
#        fi

    else
        echo "git not installed, no configuration possible, please install git" >&2
    	#curl --request GET 'https://git.ebcont.com/jakobus.schuerz/server-config/repository/master/archive.tar.gz'
    fi
    # Install some scripts to ~/bin
    scripts=(configserver.sh git-checkout.sh)
    TARGETDIR="${HOME}/bin"
    [ -d ${TARGETDIR} ] || mkdir -p ${TARGETDIR}
    for i in ${scripts[*]};do
        [ -e bin/${i} ] && install bin/"${i}" "${TARGETDIR}/${i}"
    done

    cd ${HOME}
}




#if $(ping -W 1 -c 1 github.com > /dev/null 2>&1) ;then 
#if [ $(curl -sLI --connect-timeout 1 -m 1 "${GIT_HTTP_PROTOCOL}${GIT_SERVER}" |grep "HTTP/"|tail -n1|cut -d$' ' -f2 ) -eq 200 ] ;then 
case $TERM in
    *term*)
        if [ -d "${SCONF}" ]; then
            cd  "${SCONF}"
            if [ $( git remote get-url origin|grep ${GIT_HTTP_PROTOCOL}${GIT_SERVER} ; echo $?) -gt 0 ]; then
                git remote set-url origin --add "${GIT_HTTP_PROTOCOL}${GIT_SERVER}:${GIT_HTTP_PATH}${GIT_REPOPATH}"
            fi
            if $( timeout --foreground "${GIT_TIMEOUT}"  git ls-remote >/dev/null  2>&1) ;then 
                sync_config
                . ${SCONF}/functions.sh
                create_symlinks "$SCONF"
            else 
                echo "${GIT_SERVER}" not reachable >&2;
                echo profile not syncing >&2;
            fi
        else
            echo "Create Server-Config and configure git"
            git clone "${GIT_HTTP_PROTOCOL}${GIT_SERVER}${GIT_REPOPATH}" 2>>"${LOGFILE}"
            #git clone "https://github.com/xundeenergie/server-config.git"
            
            cd  "${SCONF}"

            # Initialize Vundle as preconfigured Submodule
            git submodule update --init --recursive

            USERNAME="jakobus.schuerz"
            FULLNAME="Jakobus Schürz"
            
            git config user.email ${USERNAME}
            git config user.name ${FULLNAME}

            #git config push.default simple
            git remote set-url origin --add "${GIT_SSH_PROTOCOL}${GIT_SERVER}:${GIT_SSH_PATH}${GIT_REPOPATH}"
            


            #git config credential.helper 'store'
            
            sync_config

            . ${SCONF}/functions.sh
            
            create_symlinks "$SCONF"

            # Install vim Plugins
            #echo "Run Vim, and in Vim run :PluginInstall to install all Plugins"
            vim -c "PluginInstall" -c ":qa!"
        fi
        ;;
    *screen*)
        ;;
esac

. ${SCONF}/functions.sh

#######################################################################################
# User specific aliases and function
if [ -f "~/.bashrc_local" ]; then
	. "~/.bashrc_local"
fi

if [ -f "${SCONF}/vimrc" ]; then
    svi () { sudo vim -u "${SCONF}/vimrc" $@; }
fi

if [ -f "${SCONF}/aliases" ]; then
	. "${SCONF}/aliases"
fi

if [ -f ~/.aliases ]; then
	. ~/.aliases
fi

if [ -f "${SCONF}/PS1" ]; then
	. "${SCONF}/PS1"
fi

if [ -f ~/.config/gnome-shell-extensions-default.list ]; then
    gnome-shell-extensions-enable-defaults () { for i in $(cat ~/.config/gnome-shell-extensions-default.list); do gnome-shell-extension-tool -e $i;done; }
fi


sshs() {
    MKTMPCMD="mktemp /tmp/${USER}.bashrc.XXXXXXXX.conf"
    TMPBASHCONFIG=$($MKTMPCMD)
    FILELIST=("${SCONF}/aliases" "${HOME}/.aliases" "${SCONF}/PS1")
    for f in ${FILELIST[*]}; do
        if [ -e $f ]; then
            echo add $f to tmpconfig
            cat "$f" >> "${TMPBASHCONFIG}";
        fi
    done
    if [ $# -ge 1 ]; then
        if [ -e "${TMPBASHCONFIG}" ] ; then
            REMOTETMPBASHCONFIG=$(ssh $@ "$MKTMPCMD")
            ssh $@ "cat > ${REMOTETMPBASHCONFIG}" < "${TMPBASHCONFIG}"
            #rm "${TMPBASHCONFIG}"
          
            ssh -t $@ "bash --rcfile ${REMOTETMPBASHCONFIG}; rm ${REMOTETMPBASHCONFIG}"
        else
            echo "${TMPBASHCONFIG} does not exist. Use »ssh $@«"
        fi
    else
        ssh
    fi
}

#complete -F _ssh sshs
# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    #PATH="$HOME/bin:$PATH"
    pathmunge "$HOME/bin"
    export PATH
fi


#########################################################################################

[ -z "$XDG_RUNTIME_DIR" ] && export XDG_RUNTIME_DIR=/run/user/$(id -u $USER)
if test $SSH_TTY && test $TERM != screen && test $(systemctl status tmux@${USER}.service 1>/dev/null 2>&1; echo $? ) -eq 0; then
    cat << EOF

        "User: $USER - $UID"

        Starting or resuming screen session
        Press CTRL+C to cancel screen startup

EOF
        #systemctl --user start vnc@5901.service
        sleep 2
        #screen -UxR
        tmux attach-session
fi

cd ${HOME}

unset -f pathmunge
# Add ~/server-config/bin to PATH
#PATH="${HOME}/server-config/bin:${PATH}"
