#!/bin/bash
#debug

if grep '^\[ -f bashrc_add \] ' ~/.bashrc; then
    echo "old config"
    if [ ! -e ~/.local/myshellconfig/bashrc_add ] ; then
        git clone https://git.schuerz.at/public/myshellconfig.git ~/.local/myshellconfig
    fi
    . ~/.local/myshellconfig/functions
    sshmyshellconfig localhost
else
    echo "new config"
fi
    
# set SSHS to false, if not set
if [ -z ${SSHS+x} ]; then SSHS=false;fi

# check if we are a interactive shell
if [ -n "$PS1" ] ;then
    #echo "interactive shell" >&2
   

    # define variables

    USERNAME="$USER"
    FULLNAME="$(getent passwd $USER | cut -d ":" -f 5 | cut -d ',' -f 1)"
    GIT_AUTHOR_NAME=$USERNAME
    GIT_AUTHOR_EMAIL=$FULLNAME
    GIT_COMMITTER_NAME=$USERNAME
    GIT_COMMITTER_EMAIL=$FULLNAME

    [ -z "${HOSTCONFIG_SUBPATH+x}" ]     && HOSTCONFIG_SUBPATH=server-config
    [ -z "${HOSTCONFIG_BASE+x}" ]        && HOSTCONFIG_BASE="${HOME}/${HOSTCONFIG_SUBPATH}"
    [ -z "${HOSTCONFIG_LOGDIR+x}" ]      && HOSTCONFIG_LOGDIR="${HOSTCONFIG_BASE}/logs"
    [ -z "${HOSTCONFIG_LOGFILE+x}" ]     && HOSTCONFIG_LOGFILE="${HOSTCONFIG_LOGDIR}/git.log"
    [ -z "${HOSTCONFIG_GIT_TIMEOUT+x}" ] && HOSTCONFIG_GIT_TIMEOUT=5s
    [ -z "${HOSTCONFIG_GIT_CHECKOUT_TIMEOUT+x}" ] && HOSTCONFIG_GIT_CHECKOUT_TIMEOUT=20s
    HOSTCONFIG_BASH_COMPLETION="${HOME}/${HOSTCONFIG_SUBPATH}/bash_completion.d"

    SGIT="git -C ${HOSTCONFIG_BASE}" 
    export HOSTCONFIG_BASE HOSTCONFIG_LOGDIR HOSTCONFIG_LOGFILE SGIT

    # define functions

    ckrepo () {
        # check if remote repo is reachable
        if $( timeout --foreground "${HOSTCONFIG_GIT_TIMEOUT}"  $SGIT ls-remote >/dev/null  2>&1) ;then 
            return 0
        else 
            return 1
        fi

    }

    sync_config () {
        local nok=""
        local gco=""
        if which git >/dev/null; then
            echo -n "Sync config with ${HOSTCONFIG_GIT_SERVER}: " 1>&2
            # HOSTCONFIG_GITCHECKOUTSCRIPT_OPTIONS are options for bin/git-hostconfig-checkout
            # this are now:
            #   -h for headless repo
            if [ -z ${HOSTCONFIG_GIT_CHECKOUTSCRIPT_OPTIONS+x} ]; then
                gco="-h"
            else
                gco="$HOSTCONFIG_GIT_CHECKOUTSCRIPT_OPTIONS"
            fi
            ${HOSTCONFIG_BASE}/bin/git-hostconfig-checkout ${gco}|| nok="not " 1>>"${HOSTCONFIG_LOGFILE}" 2>&1 #|tee -a ./logs/git.log 1>&2   
            printf '%s\n' "${nok}synced" 1>&2

            # If you want, put a greeting message after sync here
#                    cat << EOF >&2
#
#---------------------------------------------------
#if you want to update submodules, change dir an run
#cd ~/server-config
#git submodule update --remote --merge
#cd ~
#---------------------------------------------------
#EOF

        else
            echo "git not installed, no configuration possible, please install git" >&2
        fi
    }

    if ! $SSHS; then
#        echo "do not source bashrc_add" >&2
#    else
#        echo "source bashrc_add" >&2
        # Uncomment the following line if you don't like systemctl's auto-paging feature:
        # export SYSTEMD_PAGER=

        ### set userspecific variables #######
        [ -z "$PDSH_RCMD_TYPE" ] && PDSH_RCMD_TYPE=ssh
        [ -z "$XDG_RUNTIME_DIR" ] && export XDG_RUNTIME_DIR=/run/user/$(id -u $USER)

        ######################################

        HOSTCONFIG_GIT_PROTOCOL_GIT="git://"
        HOSTCONFIG_GIT_PROTOCOL_HTTP="http://"
        HOSTCONFIG_GIT_PROTOCOL_SSH="git@"
        [ -z "${HOSTCONFIG_GIT_SERVER+x}" ] && HOSTCONFIG_GIT_SERVER="git.schuerz.at"
        [ -z "${HOSTCONFIG_GIT_REPO_NAME+x}" ] && HOSTCONFIG_GIT_REPO_NAME="server-config.git"
        [ -z "${HOSTCONFIG_GIT_REPO_PATH_HTTP+x}" ] && HOSTCONFIG_GIT_REPO_PATH_HTTP="/public/"
        [ -z "${HOSTCONFIG_GIT_REPO_PATH_SSH+x}" ] && HOSTCONFIG_GIT_REPO_PATH_SSH=":public/"
        [ -z "${HOSTCONFIG_GIT_REPO_PATH_GIT+x}" ] && HOSTCONFIG_GIT_REPO_PATH_GIT="/public/"

        HOSTCONFIG_GIT_REMOTE_PUBLIC_GIT="${HOSTCONFIG_GIT_PROTOCOL_GIT}${HOSTCONFIG_GIT_SERVER}${HOSTCONFIG_GIT_REPO_PATH_GIT}"
        HOSTCONFIG_GIT_REMOTE_PUBLIC_SSH="${HOSTCONFIG_GIT_PROTOCOL_SSH}${HOSTCONFIG_GIT_SERVER}${HOSTCONFIG_GIT_REPO_PATH_SSH}"
        HOSTCONFIG_GIT_REMOTE_PUBLIC_HTTP="${HOSTCONFIG_GIT_PROTOCOL_HTTP}${HOSTCONFIG_GIT_SERVER}${HOSTCONFIG_GIT_REPO_PATH_HTTP}"
        HOSTCONFIG_GIT_REMOTE_PUBLIC_DEFAULT="${HOSTCONFIG_GIT_REMOTE_PUBLIC_GIT}"

        HOSTCONFIG_GIT_REMOTE_DEFAULT="${HOSTCONFIG_GIT_PROTOCOL_GIT}${HOSTCONFIG_GIT_SERVER}${HOSTCONFIG_GIT_REPO_PATH_GIT}"

        # If HOSTCONFIG_GIT_REMOTE is set in ~/.bashrc before sourcing this file, take value from ~/.bashrc
        # If set HOSTCONFIG_GIT_REMOTE_PROTOCOL in ~/.bashrc before sourcing this file, you cange choose one of the above 
        # defined values for a specific host

        if [ -z ${HOSTCONFIG_GIT_REMOTE+x} ]; then
            case $HOSTCONFIG_GIT_REMOTE_PROTOCOL in
                git)
                    HOSTCONFIG_GIT_REMOTE_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_GIT}"
                    ;;
                ssh)
                    HOSTCONFIG_GIT_REMOTE_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_SSH}"
                    ;;
                http)
                    HOSTCONFIG_GIT_REMOTE_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_HTTP}"
                    ;;
                *)
                    HOSTCONFIG_GIT_REMOTE_PUBLIC="${HOSTCONFIG_GIT_REMOTE_DEFAULT}"
                    ;;
                esac
                HOSTCONFIG_GIT_REMOTE="${HOSTCONFIG_GIT_REMOTE_PUBLIC}${HOSTCONFIG_GIT_REPO_NAME}"
        fi

        if [ -z ${HOSTCONFIG_GIT_REMOTE_PUSH+x} ]; then
            case $HOSTCONFIG_GIT_REMOTE_PUSH_PROTOCOL in
                git)
                    HOSTCONFIG_GIT_REMOTE_PUSH_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_GIT}"
                    ;;
                ssh)
                    HOSTCONFIG_GIT_REMOTE_PUSH_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_SSH}"
                    ;;
                http)
                    HOSTCONFIG_GIT_REMOTE_PUSH_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_HTTP}"
                    ;;
                *)
                    HOSTCONFIG_GIT_REMOTE_PUSH_PUBLIC="${HOSTCONFIG_GIT_REMOTE_PUBLIC_DEFAULT}"
                    ;;
                esac
                HOSTCONFIG_GIT_REMOTE_PUSH=${HOSTCONFIG_GIT_REMOTE_PUSH_PUBLIC}${HOSTCONFIG_GIT_REPO_NAME}
        fi

        #GIT_SSH_PATH="/srv/repos"

        case $TERM in
            *term*)

                if [ -d "${HOSTCONFIG_BASE}" -a $($SGIT status 1>/dev/null 2>&1; echo $?) -eq 0 ]; then
                    [ -d "${HOSTCONFIG_LOGDIR}" ] || mkdir -p "${HOSTCONFIG_LOGDIR}"
                    if ! $SGIT rev-parse --git-dir > /dev/null 2>&1 ; then
                        echo "Init ${HOSTCONFIG_BASE} as git-repo" >&2
                        $SGIT init
                    fi
                    
                    # Update Userinformations for git
                    $SGIT config user.email "${USERNAME}"
                    $SGIT config user.name "${FULLNAME}"

                    # set upstream only if not detached
                    [ $($SGIT rev-parse --abbrev-ref HEAD) != "HEAD" ] && $SGIT branch --set-upstream-to=origin/$($SGIT rev-parse --abbrev-ref HEAD)

                    # sync repo with origin if git is reachable 
                    if ckrepo ; then
                        sync_config
                        . ${HOSTCONFIG_BASE}/functions.sh
                        create_symlinks "$HOSTCONFIG_BASE"
                    else 
                        echo "${HOSTCONFIG_GIT_SERVER}" not reachable >&2;
                        echo profile not syncing >&2;
                    fi

                else
                    echo "Clone ${HOSTCONFIG_GIT_REMOTE} and configure git" >&2

                    if $( timeout --foreground "${HOSTCONFIG_GIT_CHECKOUT_TIMEOUT}" git -C ${HOME} clone "${HOSTCONFIG_GIT_REMOTE}" "${HOSTCONFIG_BASE}" ); then
                        :
                    else
                        HOSTCONFIG_GIT_REMOTE="${HOSTCONFIG_GIT_REMOTE_PUBLIC_HTTP}${HOSTCONFIG_GIT_REPO_NAME}"
                        echo "Clone ${HOSTCONFIG_GIT_REMOTE} and configure git" >&2
                        timeout --foreground "${HOSTCONFIG_GIT_CHECKOUT_TIMEOUT}" git -C ${HOME} clone "${HOSTCONFIG_GIT_REMOTE}" "${HOSTCONFIG_BASE}" || exit 1
                    fi



                    [ -d "${HOSTCONFIG_BASE}" ] && { echo create ${HOSTCONFIG_LOGDIR} >&2; mkdir -p "${HOSTCONFIG_LOGDIR}"; }

                    $SGIT config user.email "${USERNAME}"
                    $SGIT config user.name "${FULLNAME}"

                    # Initialize Vundle as preconfigured Submodule
                    #$SGIT submodule update --init --recursive
                    #$SGIT submodule foreach 'git checkout master'

                    echo "sync config" >&2
                    sync_config
                    . ${HOSTCONFIG_BASE}/functions.sh
                    echo "config synced, functions.sh sourced" >&2
                    create_symlinks "$HOSTCONFIG_BASE"

                    # Install vim Plugins
                    #echo "Run Vim, and in Vim run :PluginInstall to install all Plugins"
                    vim -c "PluginInstall" -c ":qa!"
                fi
                [ -z ${HOSTCONFIG_GIT_REMOTE_PUSH+x} ] || $SGIT remote set-url --push origin "${HOSTCONFIG_GIT_REMOTE_PUSH}" 
    #            cd ${HOME}
                ;;
            *screen*)
                echo "I'm in sceen/tmux now" >&2
                ;;
            *dumb*)
                echo "Run with dumb terminal" 1>&2
                ;;
        esac

        if [ -e ${HOSTCONFIG_BASE}/functions.sh ]; then
            . ${HOSTCONFIG_BASE}/functions.sh
        else
            return
        fi



        ######################################################################################
        # ls is not in color on all systems
        export LS_OPTIONS='--color=auto'
        eval "`dircolors`"

        #######################################################################################
        # User specific aliases and function


        if [ -d "${HOME}/bin" ] ; then
            pathmunge "${HOME}/bin"
            export PATH
        fi

        if [ -d "${HOSTCONFIG_BASE}/bin" ] ; then
            pathmunge "${HOSTCONFIG_BASE}/bin"
            export PATH
        fi

        if [ -d "${HOSTCONFIG_BASE}/git-credential-pass" ] ; then
            pathmunge "${HOSTCONFIG_BASE}/git-credential-pass"
            export PATH
        fi

        if [ -f "${HOSTCONFIG_BASE}/aliases" ]; then
            . "${HOSTCONFIG_BASE}/aliases"
        fi

        if [ -f ~/.aliases ]; then
            . ~/.aliases
        fi

        if [ -f "${HOSTCONFIG_BASE}/PS1" ]; then
            . "${HOSTCONFIG_BASE}/PS1"
        fi

        if [ -e "${HOSTCONFIG_BASH_COMPLETION}" ]; then
            for i in $( ls "${HOSTCONFIG_BASH_COMPLETION}" ); do
                . "${HOSTCONFIG_BASH_COMPLETION}/${i}"
            done
        fi


        #########################################################################################


        # Go HOME
        #cd ${HOME}


        echo "bashrc_add sourced" 1>&2

        if test ! $TMUX && test $SSH_TTY && test $TERM != screen && test $(systemctl status tmux@${USER}.service 1>/dev/null 2>&1; echo $? ) -eq 0; then
            cat << EOF

    "User: $USER - $UID"

    Starting or resuming screen session
    Press CTRL+C to cancel screen startup

EOF
                sleep 1
                #screen -UxR
                tmux attach-session
        fi

        unset -f pathmunge

    else

        case $TERM in
            *screen*)
                echo BASHRC: $BASHRC -> source it
                #[ -e $BASHRC ] && . "$BASHRC"
                if [ ! -z ${BASHRC+x} ]; then
                    if [ -e $BASHRC ] ; then
                        exec bash --rcfile "$BASHRC" -i /dev/null
                    else
                        exec bash -i
                    fi
                else
                    exec bash -i
                fi

                ;;
        esac

    fi

fi

