#!/bin/bash

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

echo "bashrc_add sourced" 1>&2
GIT_GIT_PROTOCOL="git://"
GIT_HTTP_PROTOCOL="http://"
GIT_SSH_PROTOCOL="git@"
GIT_SERVER="git.schuerz.at"
GIT_REPO_NAME="server-config.git"
GIT_REPO_PATH_HTTP="/public/"
GIT_REPO_PATH_SSH=":public/"
GIT_REPO_PATH_GIT="/public/"

SERVERCONFIG_GIT_REMOTE_GIT="${GIT_GIT_PROTOCOL}${GIT_SERVER}${GIT_REPO_PATH_GIT}${GIT_REPO_NAME}"
SERVERCONFIG_GIT_REMOTE_SSH="${GIT_SSH_PROTOCOL}${GIT_SERVER}${GIT_REPO_PATH_SSH}${GIT_REPO_NAME}"
SERVERCONFIG_GIT_REMOTE_HTTP="${GIT_HTTP_PROTOCOL}${GIT_SERVER}${GIT_REPO_PATH_HTTP}${GIT_REPO_NAME}"

SERVERCONFIG_GIT_REMOTE_DEFAULT="${SERVERCONFIG_GIT_REMOTE_GIT}"

# If SERVERCONFIG_GIT_REMOTE is set in ~/.bashrc before sourcing this file, take value from ~/.bashrc
# If set SERVERCONFIG_GIT_REMOTE_PROTOCOL in ~/.bashrc before sourcing this file, you cange choose one of the above 
# defined values for a specific host

if [ -z ${SERVERCONFIG_GIT_REMOTE+x} ]; then
    case $SERVERCONFIG_GIT_REMOTE_PROTOCOL in
        git)
            SERVERCONFIG_GIT_REMOTE="${SERVERCONFIG_GIT_REMOTE_GIT}"
            ;;
        ssh)
            SERVERCONFIG_GIT_REMOTE="${SERVERCONFIG_GIT_REMOTE_SSH}"
            ;;
        http)
            SERVERCONFIG_GIT_REMOTE="${SERVERCONFIG_GIT_REMOTE_HTTP}"
            ;;
        *)
            SERVERCONFIG_GIT_REMOTE="${SERVERCONFIG_GIT_REMOTE_DEFAULT}"
            ;;
        esac
fi

if [ -z ${SERVERCONFIG_GIT_REMOTE_PUSH+x} ]; then
    case $SERVERCONFIG_GIT_REMOTE_PUSH_PROTOCOL in
        git)
            SERVERCONFIG_GIT_REMOTE_PUSH="${SERVERCONFIG_GIT_REMOTE_GIT}"
            ;;
        ssh)
            SERVERCONFIG_GIT_REMOTE_PUSH="${SERVERCONFIG_GIT_REMOTE_SSH}"
            ;;
        http)
            SERVERCONFIG_GIT_REMOTE_PUSH="${SERVERCONFIG_GIT_REMOTE_HTTP}"
            ;;
        *)
            SERVERCONFIG_GIT_REMOTE_PUSH="${SERVERCONFIG_GIT_REMOTE_DEFAULT}"
            ;;
        esac
fi

#GIT_SSH_PATH="/srv/repos"
SERVERCONFIG_SUBPATH=server-config
SERVERCONFIG_BASE="${HOME}/${SERVERCONFIG_SUBPATH}"
SERVERCONFIG_BASH_COMPLETION="${HOME}/${SERVERCONFIG_SUBPATH}/bash_completion.d"
SERVERCONFIG_LOGDIR="${SERVERCONFIG_BASE}/logs"
SERVERCONFIG_LOGFILE="${SERVERCONFIG_LOGDIR}/git.log"
GIT_TIMEOUT=5s

TMUX_SESSION_DIRS=( ~/.config/tmux/sessions ~/.local/share/tmux/sessions ~/.tmux/sessions)
SETPROXY_CREDS_DIRS=(~/.config/proxycreds)
export SERVERCONFIG_BASE SERVERCONFIG_LOGDIR SERVERCONFIG_LOGFILE TMUX_SESSION_DIRS

#----------------------------------------
# eigentlich sinnloss, denn serverconfig.local könnte man ja direkt in ~/.bashrc vor dem sourcen von bashrc_add einfügen... 
[ -f "${SERVERCONFIG_BASE}/serverconfig.local.conf" ] && . "${SERVERCONFIG_BASE}/serverconfig.local.conf"

sync_config () {
    local nok=""
    local gco=""
    cd  "${SERVERCONFIG_BASE}"
    if which git >/dev/null; then
        echo -n "Sync config with ${GIT_SERVER}: " 1>&2
        #git pull > /dev/null 2>&1
        # SERVERCONFIG_GITCHECKOUTSCRIPT_OPTIONS are options for bin/git-checkout.sh
        # this are now:
        #   -h for headless repo
        if [ -z ${SERVERCONFIG_GIT_CHECKOUTSCRIPT_OPTIONS+x} ]; then
            gco="-h"
        else
            gco="$SERVERCONFIG_GIT_CHECKOUTSCRIPT_OPTIONS"
        fi
        #echo gco: $gco 2>&1
        ./bin/git-checkout.sh ${gco}|| nok="not " 1>>"${SERVERCONFIG_LOGFILE}" 2>&1 #|tee -a ./logs/git.log 1>&2   
        printf '%s\n' "${nok}synced" 1>&2

#cat << EOF >&2
#
#---------------------------------------------------
#if you want to update submodules, change dir an run
#cd ~/server-config
#git submodule update --remote --merge
#cd ~
#---------------------------------------------------
#EOF

    else
        echo "git not installed, no configuration possible, please install git" >&2
        #curl --request GET 'https://git.ebcont.com/jakobus.schuerz/server-config/repository/master/archive.tar.gz'
    fi
    # Install some scripts to ~/bin
    scripts=(configserver.sh git-checkout.sh)
    TARGETDIR="${HOME}/bin"
    [ -d ${TARGETDIR} ] || mkdir -p ${TARGETDIR}
    for i in ${scripts[*]};do
        [ -e bin/${i} ] && install bin/"${i}" "${TARGETDIR}/${i}"
    done

}




#if $(ping -W 1 -c 1 github.com > /dev/null 2>&1) ;then 
#if [ $(curl -sLI --connect-timeout 1 -m 1 "${GIT_HTTP_PROTOCOL}${GIT_SERVER}" |grep "HTTP/"|tail -n1|cut -d$' ' -f2 ) -eq 200 ] ;then 
case $TERM in
    *term*)

        USERNAME="$USER"
        FULLNAME="$(getent passwd $USER | cut -d ":" -f 5 | cut -d ',' -f 1)"

        if [ -d "${SERVERCONFIG_BASE}" ]; then
            cd  "${SERVERCONFIG_BASE}"
            [ -d "${SERVERCONFIG_LOGDIR}" ] || mkdir -p "${SERVERCONFIG_LOGDIR}"
            if [ $(git -C "${SERVERCONFIG_BASE}" rev-parse --git-dir > /dev/null 2>&1 && echo 0 || echo 1 ) ]; then
                #echo "Update ${SERVERCONFIG_BASE}" >&2
                git remote set-url origin "${SERVERCONFIG_GIT_REMOTE}" 
            
            else
                #echo "Init ${SERVERCONFIG_BASE}" >&2
                git init
            fi
            
            # Update Userinformations for git
            git config user.email "${USERNAME}"
            git config user.name "${FULLNAME}"

            # set upstream only if not detached
            [ $(git rev-parse --abbrev-ref HEAD) != "HEAD" ] && git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)

            # sync repo with origin if git is reachable 
            if $( timeout --foreground "${GIT_TIMEOUT}"  git ls-remote >/dev/null  2>&1) ;then 
                sync_config
                . ${SERVERCONFIG_BASE}/functions.sh
                create_symlinks "$SERVERCONFIG_BASE"
            else 
                echo "${GIT_SERVER}" not reachable >&2;
                echo profile not syncing >&2;
            fi
        else
            #echo "Clone ${SERVERCONFIG_BASE} and configure git" >&2

            git clone "${SERVERCONFIG_GIT_REMOTE}" "${SERVERCONFIG_BASE}"

            cd  "${SERVERCONFIG_BASE}"
            [ -d "${SERVERCONFIG_LOGDIR}" ] || mkdir -p "${SERVERCONFIG_LOGDIR}"

            git config user.email "${USERNAME}"
            git config user.name "${FULLNAME}"

            # Initialize Vundle as preconfigured Submodule
            git submodule update --init --recursive

            sync_config
            . ${SERVERCONFIG_BASE}/functions.sh
            create_symlinks "$SERVERCONFIG_BASE"

            # Install vim Plugins
            #echo "Run Vim, and in Vim run :PluginInstall to install all Plugins"
            vim -c "PluginInstall" -c ":qa!"
        fi
        [ -z ${SERVERCONFIG_GIT_REMOTE_PUSH+x} ] || git remote set-url --push origin "${SERVERCONFIG_GIT_REMOTE_PUSH}" 
        cd ${HOME}
        ;;
    *screen*)
        ;;
    *dumb*)
        return
        ;;
esac

if [ -e ${SERVERCONFIG_BASE}/functions.sh ]; then
    . ${SERVERCONFIG_BASE}/functions.sh
else
    return
fi



######################################################################################
# ls is not in color on all systems
export LS_OPTIONS='--color=auto'
eval "`dircolors`"

#######################################################################################
# User specific aliases and function

if [ -d "$HOME/bin" ] ; then
    pathmunge "$HOME/bin"
    pathmunge "${SERVERCONFIG_BASE}/bin"
    export PATH
fi

if [ -f "${SERVERCONFIG_BASE}/aliases" ]; then
	[ -e ${SERVERCONFIG_BASE} ] && . "${SERVERCONFIG_BASE}/aliases"
fi

if [ -f ~/.aliases ]; then
	. ~/.aliases
fi

if [ -f "${SERVERCONFIG_BASE}/PS1" ]; then
	[ -e ${SERVERCONFIG_BASE} ] && . "${SERVERCONFIG_BASE}/PS1"
fi



#########################################################################################

[ -z "$XDG_RUNTIME_DIR" ] && export XDG_RUNTIME_DIR=/run/user/$(id -u $USER)
if test $SSH_TTY && test $TERM != screen && test $(systemctl status tmux@${USER}.service 1>/dev/null 2>&1; echo $? ) -eq 0; then
    cat << EOF

        "User: $USER - $UID"

        Starting or resuming screen session
        Press CTRL+C to cancel screen startup

EOF
        sleep 2
        #screen -UxR
        tmux attach-session
fi

unset -f pathmunge
#unset -v SERVERCONFIG_GIT_REMOTE  SERVERCONFIG_GIT_REMOTE_PROTOCOL
cd ${HOME}


PDSH_RCMD_TYPE=ssh

if [ -e "${SERVERCONFIG_BASH_COMPLETION}" ]; then
    for i in $( ls "${SERVERCONFIG_BASH_COMPLETION}" ); do
        . "${SERVERCONFIG_BASH_COMPLETION}/${i}"
    done
fi
